# source: http://localhost:8080/graphql
# timestamp: Fri Oct 11 2019 16:21:09 GMT+0100 (British Summer Time)

type CascadePermission {
  defaultPerm: Boolean!
  discordPerms: [Permission]
  permissionRaw: String
  module: Module
}

enum Flag {
  BETA
  SPOTIFY
  MUSIC_SERVICES
}

type Group {
  name: String
  roleIds: [Long]
  id: String
  permissions: [String]
}

input GroupInput {
  name: String
  roleIds: [Long]
  id: String
  permissions: [String]
}

type GuildCommandInfo {
  defaultCommand: String
  forceDefault: Boolean!
  aliases: [String]
  command: String
  enabled: Boolean!
}

type GuildData {
  guildCommandInfos: [GuildCommandInfo]
  enabledFlags: [Flag]!
  creationTime: OffsetDateTime!
  splashUrl: String!
  memberCount: Int!
  locale: Locale!
  ownerId: String
  guildId: String
  coreSettings: GuildSettingsCore!
  stateLock: UUID!
  dbCreationTime: OffsetDateTime!
  permissions: GuildPermissions!
  categoryCount: Int!
  voiceChannelCount: Int!
  name: String!
  iconUrl: String!
  textChannelCount: Int!
}

type GuildPermissions {
  mode: PermissionMode
  groups: [Group]
  users: Map_Long_UserScalar
}

input GuildPermissionsInput {
  groups: [GroupInput]
  users: Map_Long_UserScalar
  mode: PermissionMode
}

type GuildSettingsCore {
  adminsHaveAllPerms: Boolean!
  prefix: String
  helpShowAllModules: Boolean!
  useEmbedForMessages: Boolean!
  showModuleErrors: Boolean!
  tags: Map_String_TagScalar
  deleteCommand: Boolean!
  showPermErrors: Boolean!
  helpHideCommandsNoPermission: Boolean!
  enabledModules: [Module]
  mentionPrefix: Boolean!
  allowTagCommands: Boolean!
}

type ICommandMain {
  languagePath: String
  absoluteCommand: String
  descriptionLanguagePath: String
  module: Module
  subCommands: [ISubCommand]
  flags: [Flag]
  permission: CascadePermission
  command: String
}

type ISubCommand {
  parent: String
  languagePath: String
  absoluteCommand: String
  descriptionLanguagePath: String
  flags: [Flag]
  permission: CascadePermission
  command: String
}

"""JSON object"""
scalar JSONObject

enum Locale {
  ENGLISH_UK
  ENGLISH_US
}

"""Long type"""
scalar Long

"""Built-in scalar for map-like structures"""
scalar Map_Long_UserScalar

"""Built-in scalar for map-like structures"""
scalar Map_String_ObjectScalar

"""Built-in scalar for map-like structures"""
scalar Map_String_TagScalar

enum Module {
  CORE
  MANAGEMENT
  MUSIC
  INFORMATIONAL
  MODERATION
  FUN
  DEVELOPER
}

"""Mutation root"""
type Mutation {
  updateGuildPermissions(changes: GuildPermissionsInput!, guildId: Long!): GuildPermissions
  setGuildLocale(locale: Locale!, guildId: Long!): GuildData

  """Edits any fields on a playlist. Null fields are skipped."""
  editPlaylist(name: String, id: String!, ownerId: Long, playlistScope: PlaylistScope, tracks: [String]): Playlist
  deletePlaylist(id: String!): String
  userHasPermission(permission: String, userId: Long!, guildId: Long!): Result
  setPrefix(prefix: String!, guildId: Long!): String

  """Disables all modules passed in."""
  disableModule(guildId: Long!, modules: [Module]!): [Module]

  """
  Removes tags based on the list of keys. If invalid keys are passed in, this mutation silently ignores them.
  """
  removeTags(guildId: Long!, tags: [String]!): Map_String_TagScalar

  """
  Enables all the modules passed in. Any duplicate enable modules are eliminated due to being stored in a set.
  """
  enableModule(guildId: Long!, modules: [Module]!): [Module]
  createPlaylist(scope: PlaylistScope!, name: String!, ownerId: Long!, tracks: [String]!): Playlist
  updateCoreSettings(newSettings: Map_String_ObjectScalar!, guildId: Long!): GuildSettingsCore

  """
  Updates tags using the key-value object. If the tag doesn't exist, it is
  created. This overwrites existing tags completely ignore past values.
  """
  updateTags(guildId: Long!, tags: Map_String_TagScalar!): Map_String_TagScalar
}

"""Built-in scalar representing a date-time with a UTC offset"""
scalar OffsetDateTime

enum Permission {
  CREATE_INSTANT_INVITE
  KICK_MEMBERS
  BAN_MEMBERS
  ADMINISTRATOR
  MANAGE_CHANNEL
  MANAGE_SERVER
  MESSAGE_ADD_REACTION
  VIEW_AUDIT_LOGS
  PRIORITY_SPEAKER
  VIEW_CHANNEL
  MESSAGE_READ
  MESSAGE_WRITE
  MESSAGE_TTS
  MESSAGE_MANAGE
  MESSAGE_EMBED_LINKS
  MESSAGE_ATTACH_FILES
  MESSAGE_HISTORY
  MESSAGE_MENTION_EVERYONE
  MESSAGE_EXT_EMOJI
  VOICE_CONNECT
  VOICE_SPEAK
  VOICE_MUTE_OTHERS
  VOICE_DEAF_OTHERS
  VOICE_MOVE_OTHERS
  VOICE_USE_VAD
  NICKNAME_CHANGE
  NICKNAME_MANAGE
  MANAGE_ROLES
  MANAGE_PERMISSIONS
  MANAGE_WEBHOOKS
  MANAGE_EMOTES
  UNKNOWN
}

enum PermissionAction {
  NEUTRAL
  ALLOW
  DENY
}

enum PermissionMode {
  HIERARCHICAL
  MOST_RESTRICTIVE
}

type Playlist {
  name: String
  id: String!
  ownerId: Long!
  tracks: [String]
  scope: PlaylistScope
}

enum PlaylistScope {
  GUILD
  USER
}

"""Query root"""
type Query {
  allPlaylists(scope: PlaylistScope!, ownerId: Long!): [Playlist]!
  permission(permission: String!): CascadePermission
  language(languageKey: String!): JSONObject

  """
  Returns all the meta-data for settings including required Flags, modules and
  whether it is directly editable. The list of settings names will filter the
  list returned. If the list is null, all the settings' meta-data is returned.
  """
  settingsInformation(settingsNames: [String]): [SettingsWrapper]
  guild(id: Long!): GuildData
  playlist(id: String!, guildId: Long!): Playlist
  allCommands(module: Module): [ICommandMain]!
  allPermissions: [CascadePermission]
  userGuilds: [GuildData]
}

type Result {
  cause: ResultCause
  action: PermissionAction
}

enum ResultCause {
  GROUP
  USER
  DISCORD
  OFFICIAL
  GUILD
  DEFAULT
}

type SettingsWrapper {
  name: String
  flagsRequired: [Flag]
  modules: [Module]
  directlyEditable: Boolean!
}

"""Unrepresentable type"""
scalar UNREPRESENTABLE

"""UUID String"""
scalar UUID
